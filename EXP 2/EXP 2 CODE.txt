#include <stdio.h>
#include <ctype.h>
#define MAX 100
struct Stack {
    int top;
    char items[MAX];
};
void initstack(struct Stack *stack) {
    stack->top = -1;
}
int isEmpty(struct Stack *stack) {
    return stack->top == -1;
}
void push(struct Stack *stack, char op) {
    if (stack->top < (MAX - 1)) {
        stack->items[++stack->top] = op;
    } else {
        printf("Stack overflow\n");
    }}
char pop(struct Stack *stack) {
    if (!isEmpty(stack)) {
        return stack->items[stack->top--];
    } else {
        printf("Stack underflow\n");
        return '\0';  }}
int precedence(char op) {
    switch(op) {
        case '+':
        case '-':
            return 1;
        case '*':
        case '/':
            return 2;
        case '^':
            return 3;
        default:
            return 0; }}
int isoperand(char ch) {
    return isalnum(ch);}
void infixtopostfix(char *infix, char *postfix) {
    struct Stack stack;
    initstack(&stack);
    int i, k = 0;
    for (i = 0; infix[i]; ++i) {
        if (isoperand(infix[i])) {
            postfix[k++] = infix[i];}
            else if (infix[i] == '(') {
            push(&stack, infix[i]);}
            else if (infix[i] == ')') {
            while (!isEmpty(&stack) && stack.items[stack.top] != '(') {
                postfix[k++] = pop(&stack);}
            if (!isEmpty(&stack) && stack.items[stack.top] == '(') {
                pop(&stack); } } else {  
            while (!isEmpty(&stack) && precedence(infix[i]) <= precedence(stack.items[stack.top])) {
                postfix[k++] = pop(&stack);   }
            push(&stack, infix[i]);}}

   
    while (!isEmpty(&stack)) {
        postfix[k++] = pop(&stack);
    }
    postfix[k] = '\0'; }
int main() {
    char infix[MAX], postfix[MAX];
    printf("Enter infix expression:\n");
    scanf("%s", infix);  
    infixtopostfix(infix, postfix);
    printf("Postfix expression is %s\n", postfix);
    return 0;
}
